/*
Mourino: a MIDI to MIDI-BLE adapter using Arduino 101, based on MIDIBLE.ino example
Copyright (C) 2017 Daniel Moura <oxe@oxesoft.com>

This test simulates the normal operation of a MIDI controller connected to the 
Arduino 101

This code is originally hosted at https://github.com/oxesoft/mourino

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#define byte unsigned char
#define BLE_MAX_ATTR_DATA_LEN 20
#define BLEWrite 1
#define BLEWriteWithoutResponse 1
#define BLENotify 1
#define BLERead 1
#include <stdlib.h>
#include <stdio.h>
#include <memory.h>
byte testStream[] = {
    0x90, 0x01, 0x7F,

    0x90, 0x02, 0x01,
    0x90, 0x02, 0x7F,

    0x90, 0x03, 0x01,
    0x90, 0x03, 0x02,
    0x90, 0x03, 0x03,
    0x90, 0x03, 0x04,
    0x90, 0x03, 0x05,
    0x90, 0x03, 0x06,
    0x90, 0x03, 0x07,
    0x90, 0x03, 0x7F,

    0x90, 0x03, 0x01,
    0x91, 0x03, 0x02,
    0x90, 0x03, 0x03,
    0x90, 0x03, 0x04,
    0x90, 0x03, 0x05,
    0x90, 0x03, 0x7F,

    0xC0, 0x7F,

    0xC0, 0x01,
    0xD0, 0x7F,

    0xC0, 0x01,
    0xC0, 0x02,
    0xD0, 0x01,
    0xD0, 0x7F,

    0xC0, 0x01,
    0xC0, 0x02,
    0xD1, 0x01,
    0xD0, 0x7F,

    0x90, 0x01, 0x01,
    0x91, 0x02, 0x02,
    0x93, 0x03, 0x03,
    0x94, 0x04, 0x04,
    0x95, 0x05, 0x05,

    0x96, 0x01, 0x7F,

    0x90, 0x01, 0x01,
    0xC0, 0x01,
    0xC0, 0x02,
    0x91, 0x01, 0x7F,

    0xC0, 0x01,
    0xC0, 0x02,
    0xC0, 0x03,
    0xC0, 0x04,
    0xC0, 0x05,
    0xC0, 0x06,
    0xC0, 0x07,
    0xC0, 0x08,
    0xC0, 0x09,
    0xC0, 0x0A,
    0xC0, 0x0B,
    0xC0, 0x0C,
    0xC0, 0x0D,
    0xC0, 0x0E,
    0xC0, 0x0F,
    0xC0, 0x10,
    0xC0, 0x11,
    0xC0, 0x7F,

    0xF0, 0x01, 0x02, 0x03, 0x04, 0xF7,

    0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xF7,

    0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xF7,

    0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0xF7,
};
#define EXPECTED_PACKETS 19
byte packets[EXPECTED_PACKETS][BLE_MAX_ATTR_DATA_LEN] = {
    {0x80, 0x80, 0x90, 0x01, 0x7F},
    {0x80, 0x80, 0x90, 0x02, 0x01, 0x02, 0x7F},
    {0x80, 0x80, 0x90, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03, 0x03, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x07, 0x03, 0x7F},
    {0x80, 0x80, 0x90, 0x03, 0x01, 0x80, 0x91, 0x03, 0x02, 0x80, 0x90, 0x03, 0x03, 0x03, 0x04, 0x03, 0x05, 0x03, 0x7F},
    {0x80, 0x80, 0xC0, 0x7F},
    {0x80, 0x80, 0xC0, 0x01, 0x80, 0xD0, 0x7F},
    {0x80, 0x80, 0xC0, 0x01, 0x02, 0x80, 0xD0, 0x01, 0x7F},
    {0x80, 0x80, 0xC0, 0x01, 0x02, 0x80, 0xD1, 0x01, 0x80, 0xD0, 0x7F},
    {0x80, 0x80, 0x90, 0x01, 0x01, 0x80, 0x91, 0x02, 0x02, 0x80, 0x93, 0x03, 0x03, 0x80, 0x94, 0x04, 0x04},
    {0x80, 0x80, 0x95, 0x05, 0x05, 0x80, 0x96, 0x01, 0x7F},
    {0x80, 0x80, 0x90, 0x01, 0x01, 0x80, 0xC0, 0x01, 0x02, 0x80, 0x91, 0x01, 0x7F},
    {0x80, 0x80, 0xC0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11},
    {0x80, 0x80, 0xC0, 0x7F},
    {0x80, 0x80, 0xF0, 0x01, 0x02, 0x03, 0x04, 0x80, 0xF7},
    {0x80, 0x80, 0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x80, 0xF7},
    {0x80, 0x80, 0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11},
    {0x80, 0x80, 0xF7},
    {0x80, 0x80, 0xF0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11},
    {0x80, 0x12, 0x13, 0x80, 0xF7},
};
int packetsCount = 0;
class BLECharacteristic {
public:
    BLECharacteristic(const char *uuid, int pars, int len) {
    }
    void setValue(byte *buffer, int len) {
#if 0
        printf("{");
        for (int i = 0; i < len; i++) {
            if (i > 0) {
                printf(", ");
            }
            printf("0x%02X", buffer[i]);
        }
        printf("},");
#else
        printf("packet (%02i bytes):", len);
        for (int i = 0; i < len; i++) {
            printf(" %02X", buffer[i]);
        }
#endif
        printf("\n");
        if (memcmp(buffer, packets[packetsCount], len)) {
            printf("--------------------\n");
            printf("UNEXPECTED PACKET!!!\n");
            printf("--------------------\n");
            exit(1);
        }
        packetsCount++;
    }
};
class BLEService {
public:
    BLEService(const char *uuid) {
    }
    void addCharacteristic(BLECharacteristic &c) {
    }
    int uuid() {
        return 0;
    }
};
class BLEDevice {
public:
    void begin() {
    }
    void setDeviceName(const char *name) {
    }
    void setLocalName(const char *name) {
    }
    void advertise() {
    }
    void addService(BLEService &service) {
    }
    void setAdvertisedServiceUuid(int uuid) {
    }
    void poll() {
    }
};
BLEDevice BLE;
static unsigned long timeMicros = 0;
class Serial {
public:
    unsigned int pointer;
    Serial() {
        pointer = 0;
    }
    void begin(int baudrate) {
    }
    int available() {
        return pointer < sizeof(testStream);
    }
    int read() {
        byte b = testStream[pointer++];
        if (b == 0x7F || b == 0xF7) {
            timeMicros += 11250;
        }
        return b;
    }
};
Serial Serial1;
unsigned long micros() {
    return timeMicros;
}

#include "mourino.ino"

int main() {
    setup();
    while (packetsCount < EXPECTED_PACKETS) {
        loop();
    }
}
